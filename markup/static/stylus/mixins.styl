// Mixins.


m-nl()
	margin 0
	padding 0
	text-indent 0
	list-style none
	list-style-position outside

m-blocks-justify()
	text-align justify
	text-justify newspaper


access-elem()
	clip rect(1px, 1px, 1px, 1px)
	height 1px
	overflow hidden
	position absolute
	white-space nowrap /* added line */
	width 1px

dib()
	display inline-block
	vertical-align top


// Clear the float on any element.
cf()
	&:after
		display table
		clear both
		content ''

// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
fix-text-size-adjust()
	background-image linear-gradient(transparent, transparent)

// Set element size
size($width, $height = $width)
	width $width
	height $height

// Set margin on left & right
m-x($margin)
	margin-left $margin
	margin-right $margin

// Set margin on top & bottom
m-y($margin)
	margin-top $margin
	margin-bottom $margin

// Set pading on left & right
p-x($padding)
	padding-left $padding
	padding-right $padding

// Set padding on top & bottom
p-y($padding)
	padding-top $padding
	padding-bottom $padding

// Set one static retina image
retinaBackground($image, $ext = 'png') {
	background-image url('../images/' + $image + '.' + $ext)

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image url('../images/' + $image + '@2x.' + $ext)
	}
}

placeholder()
	if selector() == "&"
		error( "placeholder() must be called from a ruleset!" )
	&::-webkit-input-placeholder
		{block}
	&:-moz-placeholder
		{block}
	&::-moz-placeholder
		{block}
	&:-ms-input-placeholder
		{block}

m-nl()
	margin 0
	padding 0
	text-indent 0
	list-style none
	list-style-position outside

m-cf()
	&:before, &:after
		display table
		content ""

	&:after
		clear both

	.lt-ie8 &
		zoom 1


m-blocks-justify()
	text-align justify
	text-justify newspaper


// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
fix-text-size-adjust()
	background-image linear-gradient(transparent, transparent)

// Set element size
size($width, $height = $width)
	width $width
	height $height

// Set margin on left & right
margin-x($margin)
	margin-left $margin
	margin-right $margin

// Set margin on top & bottom
margin-y($margin)
	margin-top $margin
	margin-bottom $margin

// Set pading on left & right
padding-x($padding)
	padding-left $padding
	padding-right $padding

// Set padding on top & bottom
padding-y($padding)
	padding-top $padding
	padding-bottom $padding

// Set one static retina image
retinaBackground($image, $ext = 'png') {
	background-image url('../images/' + $image + '.' + $ext)

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image url('../images/' + $image + '@2x.' + $ext)
	}
}

set-font-size(value) {
	font-size: value; /* add PX (or original value) as backup */

	if (value is inherit) {
		/* do nothing, "inherit" has no unit */
	} else {
		font-size: remify(value);
	}
}

rem(value) { /* separate mixin, so it can be used elsewhere */
	u = unit(value);

	if (u is 'px') {
		return unit(value/16, 'rem');
	} else {
		return unit(value, u);
	}
}

// hide-text

hide-text()
	overflow hidden
	text-indent 110%
	white-space nowrap

// font-face

font-face($font-name, $file-path, $weight = 'normal', $style = 'normal')

	$url-fallback = 'url("' + $file-path + '.eot")'
	$url  = 'url("' + $file-path + '.eot?#iefix") format("embedded-opentype"), '
	$url = $url + 'url("' + $file-path + '.woff") format("woff"), '
	$url = $url + 'url("' + $file-path + '.ttf") format("truetype"), '
	$url = $url + 'url("' + $file-path + '.svg#svg' + $font-name + '") format("svg")'

	@font-face
		font-family $font-name
		src unquote($url-fallback)
		src unquote($url)
		font-weight unquote($weight)
		font-style unquote($style)

// ellipsis

ellipsis($nowrap = true)
	text-overflow ellipsis
	overflow hidden
		if $nowrap
			white-space nowrap


// percentage

percent($decimal)
	( $decimal * 100 ) %


r-percent($numerator, $denominator)
	( $numerator / $denominator  * 100 ) %

ratio($numerator, $denominator)
	( $numerator / $denominator )


// letter-spacing

tracking($val, $base = false)
	if $base
		( ( $val * $base ) / 1000 ) px
	else
		( $val / 1000 ) em


//
// TRIANGLE
// ========
// Creates a CSS triangle by passing a direction, size, and color
//


triangle($point = 'up', $size = 1em, $color = #777)

	if $size is a 'unit' && $color is a 'color'

		if $point == 'up'
			_triangle-borders({top: '', right: transparent, bottom: solid, left: transparent}, $size, $color)
		else if $point == 'right'
			_triangle-borders({top: transparent, right: '', bottom: transparent, left: solid}, $size, $color)
		else if $point == 'down'
			_triangle-borders({top: solid, right: transparent, bottom: '', left: transparent}, $size, $color)
		else if $point == 'left'
			_triangle-borders({top: transparent, right: solid, bottom: transparent, left: ''}, $size, $color)
		else if $point == 'up-left'
			$size = ($size / 2)
			_triangle-borders({top: solid, right: transparent, bottom: transparent, left: solid}, $size, $color)
		else if $point == 'up-right'
			$size = ($size / 2)
			_triangle-borders({top: solid, right: solid, bottom: transparent, left: transparent}, $size, $color)
		else if $point == 'down-right'
			$size = ($size / 2)
			_triangle-borders({top: transparent, right: solid, bottom: solid, left: transparent}, $size, $color)
		else if $point == 'down-left'
			$size = ($size / 2)
			_triangle-borders({top: transparent, right: transparent, bottom: solid, left: solid}, $size, $color)


//
// TRIANGLE BORDERS
// This mixin should not be called directly
//

_triangle-borders($sides, $size, $color)

	width 0
	height 0

	for $side, $style in $sides
		if $style == solid
			border-{$side} $size solid $color
		else if $style == transparent
			border-{$side} $size solid transparent



//
// INTERNET EXPLORER
// =================
//

// Default Variables
$is-ie ?= false
$is-ie--version ?= 0

ie($version, $strict = false)
	if ($is-ie == true)
		if($strict == true)
			if ($is-ie--version == $version)
				{block}
	else
		if ($is-ie--version <= $version)
			{block}


//
// OPACITY
// =======
//


// Default Variables
$is-ie ?= false

opacity($n, $args...)
	opacity: $n $args
	if $is-ie
		$val = round($n * 100)
		+ie(8, true)
			-ms-filter: '"alpha(opacity=%s)"' % $val $args
		+ie(7)
			filter: 'alpha(opacity=%s)' % $val $args


//
// TIMING FUNCTIONS
// ================
//


// SINE
$ease-in-sine      = cubic-bezier(0.470,  0.000, 0.745, 0.715)
$ease-out-sine     = cubic-bezier(0.390,  0.575, 0.565, 1.000)
$ease-in-out-sine  = cubic-bezier(0.445,  0.050, 0.550, 0.950)

// QUAD
$ease-in-quad      = cubic-bezier(0.550,  0.085, 0.680, 0.530)
$ease-out-quad     = cubic-bezier(0.250,  0.460, 0.450, 0.940)
$ease-in-out-quad  = cubic-bezier(0.455,  0.030, 0.515, 0.955)

// CUBIC
$ease-in-cubic     = cubic-bezier(0.550,  0.055, 0.675, 0.190)
$ease-out-cubic    = cubic-bezier(0.215,  0.610, 0.355, 1.000)
$ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)

// QUART
$ease-in-quart     = cubic-bezier(0.895,  0.030, 0.685, 0.220)
$ease-out-quart    = cubic-bezier(0.165,  0.840, 0.440, 1.000)
$ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)

// QUINT
$ease-in-quint     = cubic-bezier(0.755,  0.050, 0.855, 0.060)
$ease-out-quint    = cubic-bezier(0.230,  1.000, 0.320, 1.000)
$ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)

// EXPO
$ease-in-expo      = cubic-bezier(0.950,  0.050, 0.795, 0.035)
$ease-out-expo     = cubic-bezier(0.190,  1.000, 0.220, 1.000)
$ease-in-out-expo  = cubic-bezier(1.000,  0.000, 0.000, 1.000)

// CIRC
$ease-in-circ      = cubic-bezier(0.600,  0.040, 0.980, 0.335)
$ease-out-circ     = cubic-bezier(0.075,  0.820, 0.165, 1.000)
$ease-in-out-circ  = cubic-bezier(0.785,  0.135, 0.150, 0.860)

// BACK
$ease-in-back      = cubic-bezier(0.600, -0.280, 0.735, 0.045)
$ease-out-back     = cubic-bezier(0.175,  0.885, 0.320, 1.275)
$ease-in-out-back  = cubic-bezier(0.680, -0.550, 0.265, 1.550)


base-font-size ?= 16px
rasterise-media-queries ?= false

rupture = {
	rasterise-media-queries: rasterise-media-queries
	mobile-cutoff: 400px
	desktop-cutoff: 1050px
	hd-cutoff: 1800px
	enable-em-breakpoints: false
	base-font-size: base-font-size
	anti-overlap: false
	density-queries: 'dppx' 'webkit' 'moz' 'dpi'
	retina-density: 1.5
	use-device-width: false
}
rupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)
rupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'

-is-string(val)
	if typeof(val) is not 'unit'
		if val is a 'string' or val is a 'ident'
			true
		else
			false
	else
		false

-get-scale-number(scale-name)
	for list-item, i in rupture.scale-names
		if list-item is scale-name
			return i + 1
	return false

-convert-to(to-unit, value, context = rupture.base-font-size)
	from-unit = unit(value)
	return value if to-unit is from-unit
	if to-unit in ('em' 'rem')
		return value if from-unit in ('em' 'rem')
		return unit((value / context), to-unit)
	if to-unit is 'px'
		return unit((value * context), 'px')

-on-scale(n)
	return unit(n) is ''

-larger-than-scale(n)
	return (n > (length(rupture.scale) - 1)) and -on-scale(n)

-is-zero(n)
	return n is 0

-overlap-shift(anti-overlap, n)
	shift-unit = unit(n)
	anti-overlap = 0px unless anti-overlap
	anti-overlap = 1px if anti-overlap is true
	if length(anti-overlap) is 1
		return -convert-to(shift-unit, anti-overlap)
	for val in anti-overlap
		return val if unit(val) is shift-unit

-adjust-overlap(anti-overlap, n, side = 'min')
	-shift = -overlap-shift(anti-overlap, n)
	if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)
		n = n + -shift
	return n

-is-positive(n)
	return n >= 0

-density-queries(density)
	if typeof(density) is not 'unit'
		if not -is-string(density)
			density = '%s' % density
	density = rupture.retina-density if density is 'retina'
	queries = ()
	for query in rupture.density-queries
		if query is 'webkit'
			push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))
		else if query is 'moz'
			push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))
		else if query is 'o'
			push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))
		else if query is 'ratio'
			push(queries, '(min-device-pixel-ratio: %s)' % (density))
		else if query is 'dpi'
			if -is-string(density)
				density=convert(density)
			push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))
		else if query is 'dppx'
			push(queries, '(min-resolution: %sdppx)' % (density))
	return queries

create-fallback-class(selected, class)
	/{'' + class + ' ' + selected}
		{block}

// +between(min, max)
// usage (scale can be mixed with custom values):
//   - +between(1, 3) scale:scale
//   - +between(0, 3) 0 width:scale
//   - +between(200px, 500px) custom:custom
//   - +between(0, 300px) 0 width:custom
//   - +between(1, 300px) scale:custom
//   - +between(200px, 4) custom:scale

between(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	selected = selector()

	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	if -is-string(min)
		min = -get-scale-number(min)
	if -is-string(max)
		max = -get-scale-number(max)

	-min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))
	-max = rupture.scale[max] unless not -on-scale(max)
	-min ?= min
	-max ?= max

	if (rupture.rasterise-media-queries)
		if not (density or -max or orientation)
			{block}
	else
		condition = 'only screen'
		use-device-width = use-device-width ? 'device-' : ''
		unless -min is 0
			-min = -convert-to('em', -min) if rupture.enable-em-breakpoints
			-min = -adjust-overlap(anti-overlap, -min, side: 'min')
			condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)
		unless -larger-than-scale(max)
			-max = -convert-to('em', -max) if rupture.enable-em-breakpoints
			-max = -adjust-overlap(anti-overlap, -max, side: 'max')
			condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)
		if orientation
			condition = condition + ' and (orientation: %s)' % (orientation)
		if density
			conditions = ()
			for query in -density-queries(density)
				push(conditions, condition + ' and %s' % (query))
			condition = join(', ', conditions)
		@media condition
			{block}
	if fallback-class
		+create-fallback-class(selected, fallback-class)
			{block}

at(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

from-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

above = from-width

to-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

below = to-width

mobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

tablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

desktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

hd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)
	if -is-string(orientation)
		orientation = convert(orientation)
	if -is-string(density)
		density = convert(density)
	+above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)
		{block}

density(density, orientation = null, fallback-class = null)
	selected = selector()
	if not (rupture.rasterise-media-queries)
		conditions = ()
		for query in -density-queries(density)
			condition = 'only screen and %s' % (query)
			if orientation
				condition = condition + ' and (orientation: %s)' % (orientation)
			push(conditions, condition)
		condition = join(', ', conditions)
		@media condition
			{block}
		if fallback-class
			+create-fallback-class(selected, fallback-class)
				{block}

pixel-ratio = density

retina(orientation = null, fallback-class = null)
	+density('retina', orientation, fallback-class)
		{block}

landscape(density = null, fallback-class = null)
	selected = selector()
	if not (rupture.rasterise-media-queries)
		if -is-string(density)
			density = convert(density)
		if density
			+pixel-ratio(density, orientation: landscape, fallback-class)
				{block}
		else
			@media only screen and (orientation: landscape)
				{block}
			if fallback-class
				+create-fallback-class(selected, fallback-class)
					{block}

portrait(density = null, fallback-class = null)
	selected = selector()
	if not (rupture.rasterise-media-queries)
		if -is-string(density)
			density = convert(density)
		if density
			+pixel-ratio(density, orientation: portrait, fallback-class)
				{block}
		else
			@media only screen and (orientation: portrait)
				{block}
			if fallback-class
				+create-fallback-class(selected, fallback-class)
					{block}
